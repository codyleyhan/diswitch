{"version":3,"sources":["contexts/switch-context.js","ColorModeSwitcher.js","apis/tasmota.js","components/SwitchCard.js","pages/Home.js","components/CreateForm.js","pages/Create.js","pages/Switch.js","components/ContextButton.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["fn","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","handleGetPowerResponse","data","POWER","console","log","getSwitchStatus","hostname","a","fetch","res","json","toggleSwitchStatus","getSwitchState","SwitchCard","queryClient","useQueryClient","toast","useToast","queryKey","useQuery","refetchInterval","isLoading","error","mutation","useMutation","onSuccess","result","variables","context","setQueryData","onError","title","description","status","duration","isClosable","p","href","id","name","colorScheme","mr","isDisabled","isChecked","onChange","e","mutate","SwitchContext","createContext","storageKey","initState","JSON","parse","localStorage","getItem","ADD_SWITCH","DELETE_SWITCH","UPDATE_SWITCH","reducer","switches","action","type","payload","length","filter","s","map","Error","newState","setItem","stringify","SwitchContextProvider","useReducer","state","dispatch","Provider","value","children","Home","React","useContext","cards","align","divider","CreateForm","useState","setName","setHostname","hostnameInvalid","startsWith","width","justifyContent","textAlign","my","onSubmit","preventDefault","isRequired","placeholder","target","mt","isInvalid","leftIcon","Add","Create","SwitchView","useParams","history","useHistory","dataUpdatedAt","invalidateQueries","hostnameValid","Time","Wifi","SSId","Signal","Date","toUTCString","Delete","push","ContextButton","withRouter","link","location","pathname","ArrowBack","alignSelf","justifySelf","to","isRound","QueryClient","App","QueryClientProvider","client","theme","minH","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","catch","ReactDOM","render","initialColorMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e7a85c04.chunk.js","sourcesContent":["import {\n    createContext,\n    useReducer,\n} from 'react';\n\nexport const SwitchContext = createContext();\n\nconst storageKey = 'switches';\nconst initState = JSON.parse(localStorage.getItem(storageKey)) || [];\n\nexport const ADD_SWITCH = 'ADD_SWITCH';\nexport const DELETE_SWITCH = 'DELETE_SWITCH';\nexport const UPDATE_SWITCH = 'UPDATE_SWITCH';\n\nconst withSaveState = fn => {\n    return (switches, action) => {\n       const newState = fn(switches, action);\n       localStorage.setItem(storageKey, JSON.stringify(newState));\n       return newState;\n    }\n}\n\nconst reducer = withSaveState((switches, action) => {\n    switch (action.type) {\n        case ADD_SWITCH:\n            action.payload.id = switches.length === 0 ? 0 : switches[switches.length-1].id +1;\n            return [\n                ...switches,\n                action.payload,\n            ];\n        case DELETE_SWITCH:\n            return switches.filter(s => s.id !== action.payload);\n        case UPDATE_SWITCH:\n            return switches.map(s => {\n                if (s.id !== action.payload.id) {\n                    return s\n                }\n                return {\n                    ...s,\n                    ...action.payload,\n                }\n            })\n        default:\n            throw new Error(action.type + ' is an invalid action type');\n    }\n});\n\nexport const SwitchContextProvider = props => {\n    const [state, dispatch] = useReducer(reducer, initState);\n\n    return <SwitchContext.Provider value={[state, dispatch]}>{props.children}</SwitchContext.Provider>\n};","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","const handleGetPowerResponse = (data) => {\n    if (data.POWER === 'ON') {\n        return true\n    } else if (data.POWER === 'OFF') {\n        return false\n    }\n    console.log('UNKNOWN RESPONSE FROM SWITCH: ', data)\n    return false\n}\n\nexport const getSwitchStatus = async (hostname) => {\n    const res = await fetch(`${hostname}/cm?cmnd=Power`);\n    const data = await res.json();\n    return handleGetPowerResponse(data);\n}\n\n\nexport const toggleSwitchStatus = async (hostname) => {\n    const res = await fetch(`${hostname}/cm?cmnd=Power%20TOGGLE`);\n    const data = await res.json();\n    return handleGetPowerResponse(data);\n}\n\nexport const getSwitchState = async (hostname) => {\n    const res = await fetch(`${hostname}/cm?cmnd=State`);\n    const data = await res.json();\n    return data;\n}","import React from 'react';\nimport {\n    Badge,\n    Box,\n    Flex,\n    Heading,\n    LinkBox,\n    LinkOverlay,\n    Spacer,\n    Switch,\n    useToast,\n  } from '@chakra-ui/react';\n  import {\n    useQuery,\n    useMutation,\n    useQueryClient,\n  } from 'react-query'\nimport {\n    getSwitchStatus,\n    toggleSwitchStatus,\n} from '../apis/tasmota';\n\nexport const SwitchCard = props => {\n    const queryClient = useQueryClient();\n    const toast = useToast();\n    const queryKey = ['switches', props.hostname];\n    const { isLoading, error, data } = useQuery(\n        queryKey,\n        () => getSwitchStatus(props.hostname),\n        {\n            refetchInterval: 15000,\n        }\n    );\n\n    const mutation = useMutation(\n        () => toggleSwitchStatus(props.hostname),\n        {\n            onSuccess: (result, variables, context) => {\n                queryClient.setQueryData(queryKey, result)\n            },\n            onError: (error, variables, context) => {\n                toast({\n                    title: \"failed to toggle switch\",\n                    description: \"failed because: \" + error,\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                })\n            }\n        }\n    );\n\n    return <LinkBox>\n    <Flex>\n        <Box p={2}>\n            <LinkOverlay href={'/switches/' + props.id}><Heading size=\"md\">{props.name}</Heading></LinkOverlay>\n        </Box>\n        <Spacer />\n        <Box>\n            {isLoading ? <Badge colorScheme=\"orange\" mr={3}>fetching status</Badge> : null}\n            {error && !isLoading ? <Badge colorScheme=\"orange\" mr={3}>unknown status</Badge> : null}\n            <Switch\n                isDisabled={isLoading || error || mutation.isLoading}\n                colorScheme='green'\n                size=\"lg\"\n                isChecked={data || false}\n                onChange={e => mutation.mutate()}\n                 />\n        </Box>\n        </Flex>\n    </LinkBox>\n  };\n  ","import React from 'react';\nimport {\n    Container,\n    Heading,\n    StackDivider,\n    VStack,\n} from '@chakra-ui/react';\nimport { SwitchCard } from '../components/SwitchCard';\n\nimport { SwitchContext } from '../contexts/switch-context';\n\n\nexport const Home = props => {\n    const [switches, dispatch] = React.useContext(SwitchContext);\n\n    const cards = switches.map(s => {\n        return <SwitchCard name={s.name} key={s.id} hostname={s.hostname} id={s.id}></SwitchCard>\n    })\n\n    return <Container>\n        <Heading>switches</Heading>\n        <VStack align='stretch' divider={<StackDivider />}>\n        {cards}\n        </VStack>\n    </Container>\n  };\n  ","import React from 'react';\nimport {\n    Box,\n    Button,\n    Flex,\n    FormControl,\n    FormLabel,\n    Heading,\n    Input,\n    useToast,\n  } from '@chakra-ui/react';\n  import {\n    AddIcon,\n  } from '@chakra-ui/icons';\n\nimport { SwitchContext, ADD_SWITCH } from '../contexts/switch-context';\n\n\nexport const CreateForm = props => {\n    const [switches, dispatch] = React.useContext(SwitchContext);\n    const [name, setName] = React.useState(\"\");\n    const [hostname, setHostname] = React.useState(\"\");\n    const toast = useToast();\n\n    const onSubmit = e => {\n        e.preventDefault();\n        dispatch({\n            type: ADD_SWITCH,\n            payload: {\n                name,\n                hostname,\n            }\n        })\n        setName(\"\");\n        setHostname(\"\");\n        toast({\n            title: name + ' added!',\n            description: \"Successfully added switch \" + name + ' at ' + hostname,\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n        });\n    }\n\n    const hostnameInvalid = hostname !== '' && !hostname.startsWith('http')\n\n    return <Flex width='full' align='center' justifyContent='center'>\n        <Box p={2}>\n            <Box textAlign='center'>\n                <Heading>create new switch</Heading>\n            </Box>\n            <Box my={4} textAlign='left'>\n                <form onSubmit={onSubmit}>\n                    <FormControl isRequired>\n                        <FormLabel>name</FormLabel>\n                        <Input\n                        placeholder='switch nickname'\n                        size='md'\n                        variant='flushed'\n                        value={name}\n                        isRequired\n                        onChange={e => setName(e.target.value)} />\n                    </FormControl>\n                    <FormControl mt={6} isRequired>\n                        <FormLabel>hostname</FormLabel>\n                        <Input\n                        placeholder='http://my-switch.local'\n                        size='md'\n                        variant='flushed'\n                        value={hostname}\n                        isInvalid={hostnameInvalid}\n                        onChange={e => setHostname(e.target.value)} />\n                    </FormControl>\n                    <Button\n                        leftIcon={<AddIcon />}\n                        colorScheme='blue'\n                        width=\"full\"\n                        mt={4}\n                        isDisabled={name === '' || hostname === '' || hostnameInvalid}\n                        type=\"submit\"\n                    />\n                </form>\n            </Box>\n        </Box>\n    </Flex>\n  };\n  ","import React from 'react';\nimport {\n    Container,\n    StackDivider,\n    VStack,\n} from '@chakra-ui/react';\nimport { CreateForm } from '../components/CreateForm';\n\n\nexport const Create = props => {\n    return <CreateForm></CreateForm>\n  };\n  ","import React from 'react';\nimport {\n    Box,\n    Badge,\n    Container,\n    Flex,\n    Heading,\n    Spacer,\n    VStack,\n    useToast,\n    IconButton,\n    Switch,\n    Text,\n    Input,\n} from '@chakra-ui/react';\nimport {\n    DeleteIcon,\n  } from '@chakra-ui/icons';\nimport {\n    useParams,\n    useHistory,\n} from 'react-router-dom';\nimport {\n    useQuery,\n    useMutation,\n    useQueryClient,\n  } from 'react-query'\nimport {\n    getSwitchStatus,\n    toggleSwitchStatus,\n    getSwitchState,\n} from '../apis/tasmota';\n\nimport { DELETE_SWITCH, SwitchContext, UPDATE_SWITCH } from '../contexts/switch-context';\n\n\nexport const SwitchView = props => {\n    const [switches, dispatch] = React.useContext(SwitchContext);\n    let { id } = useParams();\n\n    const s = switches[id];\n    const history = useHistory();\n   \n    const queryClient = useQueryClient();\n    const toast = useToast();\n\n    const { isLoading, error, data, dataUpdatedAt } = useQuery(\n        ['switches', s.hostname, 'state'],\n        () => getSwitchState(s.hostname),\n        {\n            refetchInterval: 15000,\n        }\n    );\n\n    const mutation = useMutation(\n        () => toggleSwitchStatus(s.hostname),\n        {\n            onSuccess: (result, variables, context) => {\n                queryClient.setQueryData(['switches', s.hostname], result)\n                queryClient.invalidateQueries(['switches', s.hostname, 'state'])\n            },\n            onError: (error, variables, context) => {\n                toast({\n                    title: \"failed to toggle switch\",\n                    description: \"failed because: \" + error,\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                })\n            }\n        }\n    );\n\n    const hostnameValid = s.hostname.startsWith('http')\n\n    const onHostnameChange = (e) => {\n        if (e.target.value === '' || !e.target.value.startsWith('http')) {\n            return\n        }\n        console.log('updating')\n        dispatch({\n            type: UPDATE_SWITCH,\n            payload: {\n                id: s.id,\n                hostname: e.target.value,\n            }\n        })\n    }\n    const onNameChange = (e) => {\n        if (e.target.value === '') {\n            return\n        }\n        console.log('updating')\n        dispatch({\n            type: UPDATE_SWITCH,\n            payload: {\n                id: s.id,\n                name: e.target.value,\n            }\n        })\n    }\n\n    const onDelete = () => {\n        dispatch({\n            type: DELETE_SWITCH,\n            payload: s.id,\n        })\n        history.push(\"/\")\n    }\n\n    return <Container>\n        <Heading>\n            <Input value={s.name} isInvalid={s.name === ''} size='xl' variant='unstyled' onChange={onNameChange} />\n        </Heading>\n        <VStack align='stretch' mt={5} divider={<Spacer/>}>\n        <Flex>\n            <Box>\n                <Input\n                size='lg'\n                isInvalid={!hostnameValid}\n                variant='unstyled'\n                value={s.hostname}\n                onChange={onHostnameChange}\n                 />\n            </Box>\n        </Flex>\n        {(!isLoading && !error) ? (\n            <Flex>\n            <Text>device time on last update: {data.Time}</Text>\n        </Flex>\n        ): null}\n        {(!isLoading && !error && data.Wifi && data.Wifi.SSId) ? (\n            <Flex>\n            <Text>device wifi: {data.Wifi.SSId}</Text>\n        </Flex>\n        ): null}\n        {(!isLoading && !error && data.Wifi && data.Wifi.Signal) ? (\n            <Flex>\n            <Text>wifi signal: {data.Wifi.Signal}</Text>\n        </Flex>\n        ): null}\n        <Flex>\n            <Text>last fetch at: {new Date(dataUpdatedAt).toUTCString()}</Text>\n        </Flex>\n        {isLoading || error ? (<Flex>\n            {isLoading ? <Badge colorScheme=\"orange\" mr={3}>fetching status</Badge> : null}\n            {error && !isLoading ? <Badge colorScheme=\"orange\" mr={3}>unknown status</Badge> : null}\n        </Flex>) : null}\n        <Flex>\n            <Switch\n                isDisabled={isLoading || error }\n                colorScheme='green'\n                size=\"lg\"\n                isChecked={(data && data.POWER === 'ON') || false}\n                onChange={e => mutation.mutate()}\n                 />\n        </Flex>\n        <Flex>\n            <IconButton icon={<DeleteIcon />} colorScheme='red' onClick={onDelete} />\n        </Flex>\n        </VStack>\n    </Container>\n  };\n  ","import React from 'react';\nimport {\n    Box,\n    IconButton,\n  } from '@chakra-ui/react';\n  import {\n    AddIcon,\n    ArrowBackIcon,\n  } from '@chakra-ui/icons';\n  import {\n    Link,\n    withRouter,\n  } from 'react-router-dom';\n\n\nexport const ContextButton = withRouter(props => {\n    console.log(props);\n    const link = props.location.pathname === '/' ? '/create' : '/'\n    const icon = props.location.pathname === '/' ? <AddIcon /> : <ArrowBackIcon />\n    return <Box alignSelf='flex-end'  justifySelf='flex-end'>\n        <Link to={link}>\n        <IconButton variant='ghost' isRound icon={icon} size='lg' />\n        </Link>\n    </Box> \n  });\n  ","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport {\n  ChakraProvider,\n  Box,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport {\n  QueryClient,\n  QueryClientProvider\n} from 'react-query';\n\n\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Home } from './pages/Home';\nimport { Create } from './pages/Create';\nimport { SwitchView } from './pages/Switch';\nimport { ContextButton } from './components/ContextButton';\n\nimport { SwitchContextProvider } from \"./contexts/switch-context\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <Router>\n      <QueryClientProvider client={queryClient}>\n        <SwitchContextProvider>\n          <ChakraProvider theme={theme}>\n            <Box textAlign=\"center\" fontSize=\"xl\">\n              <Grid minH=\"100vh\" p={3}>\n                <ColorModeSwitcher justifySelf=\"flex-end\" />\n                <Switch>\n                  <Route exact path=\"/\">\n                    <Home />\n                  </Route>\n                  <Route exact path=\"/create\">\n                    <Create />\n                  </Route>\n                  <Route path=\"/switches/:id\">\n                    <SwitchView />\n                  </Route>\n                </Switch>\n                <ContextButton />  \n              </Grid>\n            </Box>\n          </ChakraProvider>\n        </SwitchContextProvider>\n      </QueryClientProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript initialColorMode='dark' />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}